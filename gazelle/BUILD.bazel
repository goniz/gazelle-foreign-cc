# gazelle-foreign-cc/gazelle/BUILD.bazel
load("@rules_go//go:def.bzl", "go_binary", "go_library", "go_test")

# This library is for the config part, so language can depend on it
# without a circular dependency on the main gazelle plugin binary's package.
go_library(
    name = "config_lib",
    srcs = ["config.go"],
    importpath = "github.com/goniz/gazelle-foreign-cc/gazelle/config",
    visibility = ["//language:__pkg__"],
    deps = [
        "@gazelle//config",
        "@gazelle//rule",
    ],
)

# This library contains CMake API functionality that language can use
go_library(
    name = "cmake_lib",
    srcs = [
        "config.go",
        "generate.go",
    ],
    importpath = "github.com/goniz/gazelle-foreign-cc/gazelle",
    visibility = ["//language:__pkg__"],
    deps = [
        "@gazelle//config",
        "@gazelle//language",
        "@gazelle//rule",
    ],
)

go_library(
    name = "gazelle_lib",
    srcs = [
        "plugin.go",
        "resolve.go",
    ],
    importpath = "github.com/goniz/gazelle-foreign-cc/gazelle",
    deps = [
        ":cmake_lib", # Depends on the cmake_lib which has the core functionality
        "//language",
        "@gazelle//config",
        "@gazelle//label",
        "@gazelle//language",
        "@gazelle//repo",
        "@gazelle//resolve",
        "@gazelle//rule",
    ],
)

# Alias to the cmd directory binary for now
alias(
    name = "gazelle-foreign-cc",
    actual = "//cmd/gazelle-foreign-cc:gazelle-foreign-cc",
    visibility = ["//visibility:public"],
)

go_test(
    name = "gazelle_tests",
    srcs = [
        "config_test.go",
        "generate_test.go",
    ],
    data = ["//testdata:all"],
    embed = [":cmake_lib"],
    deps = [
        "@rules_go//go/tools/bazel",
    ],
)


