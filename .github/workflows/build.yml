name: Build Gazelle Foreign CC Plugin

on:
  push:
    branches: [ main ] # Or your default branch
  pull_request:
    branches: [ main ] # Or your default branch

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bazel
        uses: bazel-contrib/setup-bazel@0.14.0

      - name: Verify Bazel module integrity
        run: |
          # Check if module dependencies are tidy and up-to-date
          # This will fail if MODULE.bazel.lock is out of sync or if there are issues
          bazel mod tidy --verbose
          
          # Verify that running tidy didn't change anything
          if ! git diff --exit-code MODULE.bazel.lock; then
            echo "ERROR: MODULE.bazel.lock is not up to date!"
            echo "Please run 'bazel mod tidy' locally and commit the updated MODULE.bazel.lock file."
            exit 1
          fi

      - name: Build gazelle-foreign-cc plugin
        # The plugin binary target is //gazelle:gazelle-foreign-cc
        run: |
          bazel build //gazelle:gazelle-foreign-cc

      - name: Run Gazelle with foreign-cc plugin on testdata
        run: |
          # Ensure the plugin is built (though bazel run should handle this)
          bazel build //gazelle:gazelle-foreign-cc
          
          # Create a temporary directory for the plugin binary to be placed with the expected name
          PLUGIN_PATH_DIR=$(mktemp -d)
          # The output path for //gazelle:gazelle-foreign-cc from the root is bazel-bin/gazelle/gazelle-foreign-cc_/gazelle-foreign-cc
          cp bazel-bin/gazelle/gazelle-foreign-cc_/gazelle-foreign-cc $PLUGIN_PATH_DIR/gazelle-cmake
          export PATH=$PLUGIN_PATH_DIR:$PATH

          # Build Gazelle binary directly to avoid dependency issues
          bazel build @gazelle//cmd/gazelle
          
          # Run Gazelle directly using the built binary
          ./bazel-bin/external/gazelle+/cmd/gazelle/gazelle_/gazelle testdata/simple_cc_project
            
          # Basic check: See if a BUILD.bazel file was created
          # Note: The plugin currently loads successfully but doesn't generate BUILD files
          # since the CMake parsing logic is not yet implemented. This is expected behavior.
          if [ -f "testdata/simple_cc_project/BUILD.bazel" ]; then
            echo "BUILD.bazel found in testdata/simple_cc_project."
            cat testdata/simple_cc_project/BUILD.bazel
          else
            echo "No BUILD.bazel generated (expected - CMake parsing not yet implemented)."
            echo "Plugin loaded and Gazelle executed successfully."
          fi
        env:
          BUILD_WORKSPACE_DIRECTORY: ${{ github.workspace }}
