load("@rules_cc//cc:defs.bzl", "cc_library")

cc_library(
    name = "platform_lib",
    srcs = ["src/main.cpp"],
    includes = ["config"],
)

genrule(
    name = "cmake_configure_platform",
    srcs = [
        "CMakeLists.txt",
        "include/config.h.in",
    ],
    outs = ["config/platform.hpp"],
    cmd = "\n\t\t# Create temporary build directory \n\t\tBUILD_DIR=$$(mktemp -d)\n\t\t\n\t\t# Copy source files to build directory with correct structure\n\t\tfor f in $(SRCS); do\n\t\t\tif [[ \"$$f\" == *\"CMakeLists.txt\" ]]; then\n\t\t\t\t# For CMakeLists.txt, extract only the configure_file commands and project setup\n\t\t\t\techo \"cmake_minimum_required(VERSION 3.5)\" > \"$$BUILD_DIR/CMakeLists.txt\"\n\t\t\t\techo \"project(ConfigureOnly)\" >> \"$$BUILD_DIR/CMakeLists.txt\"\n\t\t\t\t# Extract configure_file commands from the original CMakeLists.txt\n\t\t\t\tgrep -E \"^\\s*configure_file\" \"$$f\" >> \"$$BUILD_DIR/CMakeLists.txt\" || true\n\t\t\telse\n\t\t\t\t# For other files, copy them preserving their relative path from the original package\n\t\t\t\t# Strip the package prefix if present (e.g., testdata/platform_hpp_project/)\n\t\t\t\trel_path=\"$$f\"\n\t\t\t\t# Remove package prefix - find the first directory component that might be a package\n\t\t\t\tif [[ \"$$f\" == */* ]]; then\n\t\t\t\t\t# Try to detect if this looks like a package path (containing multiple slashes)\n\t\t\t\t\tif [[ \"$$f\" == */*/* ]]; then\n\t\t\t\t\t\t# Remove the first two components (e.g., testdata/platform_hpp_project/)\n\t\t\t\t\t\trel_path=$$(echo \"$$f\" | cut -d'/' -f3-)\n\t\t\t\t\telse\n\t\t\t\t\t\t# Just remove the first component\n\t\t\t\t\t\trel_path=$${f#*/}\n\t\t\t\t\tfi\n\t\t\t\tfi\n\t\t\t\t\n\t\t\t\t# If we couldn't extract a relative path or it's empty, use the basename\n\t\t\t\tif [[ -z \"$$rel_path\" ]] || [[ \"$$rel_path\" == \"$$f\" ]]; then\n\t\t\t\t\trel_path=$$(basename \"$$f\")\n\t\t\t\tfi\n\t\t\t\t\n\t\t\t\t# Create directory structure and copy file\n\t\t\t\tmkdir -p \"$$BUILD_DIR/$$(dirname \"$$rel_path\")\"\n\t\t\t\tcp \"$$f\" \"$$BUILD_DIR/$$rel_path\"\n\t\t\tfi\n\t\tdone\n\t\t\n\t\t# Run cmake configure to generate configuration files\n\t\tcd $$BUILD_DIR\n\t\tcmake . \\\n\t\t\t-DCMAKE_BUILD_TYPE=Release \\\n\t\t\t-DBUILD_TESTING=OFF \\\n\t\t\t-DBUILD_SHARED_LIBS=OFF \\\n\t\t\t-DENABLE_DRAFTS=OFF \\\n\t\t\t-DWITH_DOCS=OFF \\\n\t\t\t-DENABLE_CPACK=OFF\n\t\t\n\t\t# Extract the generated file to the output location  \n\t\tif [ -f \"config/platform.hpp\" ]; then\n\t\t\tmkdir -p $(RULEDIR)/config\n\t\t\tcp \"config/platform.hpp\" $(RULEDIR)/config/platform.hpp\n\t\telse\n\t\t\techo \"Error: Generated file config/platform.hpp not found after cmake configure\"\n\t\t\texit 1\n\t\tfi\n\t\t\n\t\t# Clean up temporary build directory\n\t\trm -rf $$BUILD_DIR\n\t",
)

cc_library(
    name = "platform_headers",
    hdrs = ["config/platform.hpp"],
    strip_include_prefix = "config",
)
